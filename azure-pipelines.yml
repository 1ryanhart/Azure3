name: Azure Pipelines

trigger:
- master

variables:
  python.version: '3.7.6'
  vmImageName: 'ubuntu-latest'
  sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDd9EMOQLleyPuwgA0GALsGvH8yohNxmpptOeO3tlrRdHFV7OKa9Ja044+KmjhSE0bBRxcpB6izKMX9Eu9EGvhzg7zEqB5TBYcQnqDsFtUTSemEVo2wqoIpJPdZGXla7XyM9rDD9f2FteLvvocznwjqBZip7SeRHwaXOfTDInIgcUOPHIomR/4O99HXjJc5NUyZ2GnUsZ0zMpxlDZgy5XT4NJKeJmN9ZngjJV0elCL2vOJJeipejEHTNWRLmD5Rlnrtyn07QdieGkQES97SlHbymtQkCODIUD65V0h9EJRpufsCiTuq3JrvNEUyxKPArNQyM4Y0wkcu1QTWNcuZK1HF odl_user@cc-6e08fb4e-5845979bbf-xhq2f'

stages:
- stage: TerraformIaCCI
  displayName: TerraformIaC - CI
  jobs:
  - job: TerraformIaCCIJob
    displayName: TerraformIaCCI - CI Job
    pool:
      vmImage: 'ubuntu-18.04'
      name: myAgentPool
    steps:
    ######### Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: $(sshPublicKey)
        sshKeySecureFile: 'id_rsa'
    - task: Bash@3
      displayName: Copy ssh rsa pub file for vm.tf
      inputs:
        targetType: 'inline'
        script: cp $(System.DefaultWorkingDirectory)/id_rsa.pub ~/.ssh

    ######### Step 2: install terraform
    - task: CmdLine@2
      inputs:
        script: | 
          sudo apt-get install zip unzip
          export PATH=$PATH:/home/devopsagent/myagent/_work/_temp
          export PATH=$PATH:/usr/bin/unzip
          echo $PATH

    - task: TerraformInstaller@0
      displayName: install terraform
      inputs:
        terraformVersion: latest

    ######### Step 2: Initialise workspace using terraform init
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendType: azurerm
        backendServiceArm: 'UdacityDS - 26 (d69af47e-53dd-448d-a185-9d8bc0ffb988)'
        backendAzureRmResourceGroupLocation: eastus
        backendAzureRmResourceGroupName: Azuredevops
        backendAzureRmStorageAccountName: mystorage198570
        backendAzureRmContainerName: blob198570
        backendAzureRmKey: tf/terraform.tfstate

    ######### Step 3. Run the terraform plan
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'UdacityDS - 26 (d69af47e-53dd-448d-a185-9d8bc0ffb988)'

        commandOptions: -out project3cicd
    ########## Step 4. Run the terraform apply
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        command: apply
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'UdacityDS - 26 (d69af47e-53dd-448d-a185-9d8bc0ffb988)'
        commandOptions: project3cicd


- stage: Build
  jobs:
  - job: Build
    pool:
      name: myAgentPool
      vmImage: $(vmImageName)
    steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
      name: myAgentPool
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: ''
              appName: ''
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: NAME
    environment:
      name:  ENVIRONMENT NAME
      resourceType: VirtualMachine
      tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                export PATH=$PATH:/usr/lib/chromium-browser/


