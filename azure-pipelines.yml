name: Azure Pipelines

trigger:
- master


variables:
  python.version: '3.7.6'
  vmImageName: 'ubuntu-latest'
  sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDCoUZeq0Mj1W4CZUUj+TOSDWBan0SSOrJ7u0t/GZejx4vEbqWpOmYDm/KjPjGKkpSd7wF9B7XgaMkfKZ9UxrX1BzVsCwhmAX6WGYrh1MsD92hJW/2kZrVd1VGkOWxBh8ar3Sl3G2EO/HJ/LvtUEzsUDz1Gn6yjusy5L5H/efvOu6bynZJAeuRWoefRxM96BDhbhMBBvSmzKXBNn1/cmNKr64uauMACZpDa9LmTOLjrycW5awY2QzZLNDirK6v2PlQeMDcFH85IpOkTP0CjczZu1CwqdQ+5WEo3Z17NY7XaQtouaGOEMK8Pnpf0XpndBLJ0uWfchjHYe2HQkV2t2+n8+MzjA9dh5omLHwim7j5BuBhqVs1m+kbHAozY2NxwJwXKUwgi243JXck1tLJwloWyP/VPYbikhaZ+ACSvM46oKUkRUwL2aisGXCktcLj8SL91QZ30Eu98uZAJPPkzonMjbxkMkgUGyEoYaLP9U9/OAeCkFxSoHocEU4gsBAoK5Igr688Yphxv0xs5OvVtxmI5zYsRll0A5IefD+kjdR4CXyvfG6eVYzv48MIVPOUu+pSk4tudDVOkxR6V3m40q/KerPa2ICRKPBiCfAdxN6lZXrKvJ0TBDKYCWhUlhucy00Y/MAvEMsiiT/a2hXTKvOZNU0jlwSD73LCaXoapjknAKw== devopsagent@myLinuxVM'

stages:
- stage: TerraformIaCCI
  displayName: TerraformIaC - CI
  pool:
    vmImage: 'ubuntu-latest'
    name: myAgentPool
  jobs:
  - job: TerraformIaCCIJob
    displayName: TerraformIaCCI - CI Job
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'default'
        sshPublicKey: $(sshPublicKey)
        # sshKeySecureFile: 'id_rsa'

    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: $(terraform-ssh-pub)
    #     sshKeySecureFile: 'id_rsa'
    # - task: Bash@3
    #   displayName: Copy ssh rsa pub file for vm.tf
    #   inputs:
    #     targetType: 'inline'
    #     script: cp $(System.DefaultWorkingDirectory)/id_rsa.pub ~/.ssh
    # Step 1: Install Terraform
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Install Terraform 0.15.3'
      inputs:
        terraformVersion: 0.15.3
    # Step 2: Initialise workspace using terraform init
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        workingDirectory: 'ProjectStarterResources/terraform'
        backendType: azurerm
        backendServiceArm: 'UdacityDS - 26 (d69af47e-53dd-448d-a185-9d8bc0ffb988)'
        backendAzureRmResourceGroupLocation: eastus
        backendAzureRmResourceGroupName: Azuredevops
        backendAzureRmStorageAccountName: mystorage198570
        backendAzureRmContainerName: blob198570
        backendAzureRmKey: tf/terraform.tfstate
    # Step 3. Validate HCL syntaxt using terraform validate
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform validate'    
      inputs:
        command: validate
        workingDirectory: 'ProjectStarterResources/terraform'
    # Step 4. Run the terraform plan
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        workingDirectory: 'ProjectStarterResources/terraform'
        environmentServiceName: 'UdacityDS - 26 (d69af47e-53dd-448d-a185-9d8bc0ffb988)'
        commandOptions: -out project3cicd
    # Step 5. Run the terraform apply
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        command: apply
        workingDirectory: 'ProjectStarterResources/terraform'
        environmentServiceName: 'UdacityDS - 26 (d69af47e-53dd-448d-a185-9d8bc0ffb988)'
        commandOptions: project3cicd






- stage: Build
  jobs:
  - job: Build
    pool:
      name: myAgentPool
      vmImage: $(vmImageName)
    steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'path/to/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: ''
              appName: ''
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


