name: Azure Pipelines

trigger:
- master

variables:
  python.version: '3.7.6'
  vmImageName: 'ubuntu-latest'
  sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQChfO5VKLwKw6cN9a9wWix+bQDfYQdysuMdurW1QZS4IyVsk9UjpuEptvSFQFUf4fhbIna0Lm4C3wh+bLLQtcwxdgyVlXqCg3v1K+RgqwgzZJyCuQ/iIjYrIfzOkLa3IdCbvYalhBrh4YUG3MwM7OGxYAibUPYQhFJoQBx75zhhPNEZKageGMjZheJouletjD+lxcn9MlRwdA+0Yr8w3FGmbvXp6MDueTH/W/yUob/ggEdXPUDsDd2uAQTnf388yMW+qG/QZtZjWRf+MgbxiyWTNDJy1SrCbNxPokv/rn4iQvFua47tywhhRHkDCQjE+fo/WBghHX+LNkqbSkc24gx0oMpZea/+yH+p+6vRv3eVRCrENHpJ2CaHLMgdmVRrk7s/JzNkvRItg2AyxeObuYNy0A4HrUp1E9oUOqTX0SsUYsQZyNOmGA+ZE/8Xok4TjvBpeM1g9J3SVsPXn/ac2Ae462dT8Y7ocIuraCspF2msrkDvnzbfbZ9Cs6EaJRh9CEs='

stages:
- stage: TerraformIaCCI
  displayName: TerraformIaC - CI
  jobs:
  - job: TerraformIaCCIJob
    displayName: TerraformIaCCI - CI Job
    pool:
      vmImage: 'ubuntu-18.04'
      name: myAgentPool
    steps:
    ######### Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: $(sshPublicKey)
        sshKeySecureFile: 'id_rsa'
    - task: Bash@3
      displayName: Copy ssh rsa pub file for vm.tf
      inputs:
        targetType: 'inline'
        script: cp $(System.DefaultWorkingDirectory)/id_rsa.pub ~/.ssh

    ######### Step 2: install terraform
    - task: CmdLine@2
      inputs:
        script: | 
          sudo apt-get install zip unzip
          export PATH=$PATH:/home/devopsagent/myagent/_work/_temp
          export PATH=$PATH:/usr/bin/unzip
          echo $PATH

    - task: TerraformInstaller@0
      displayName: install terraform
      inputs:
        terraformVersion: latest

    ######### Step 2: Initialise workspace using terraform init
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendType: azurerm
        backendServiceArm: 'UdacityDS - 09 (5575e80b-f0da-4822-a386-38229fd50c58)'
        backendAzureRmResourceGroupLocation: eastus
        backendAzureRmResourceGroupName: Azuredevops
        backendAzureRmStorageAccountName: mystorage198570
        backendAzureRmContainerName: blob198570
        backendAzureRmKey: tf/terraform.tfstate

    ######### Step 3. Run the terraform plan
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'UdacityDS - 09 (5575e80b-f0da-4822-a386-38229fd50c58)'

        commandOptions: -out project3cicd
    ########## Step 4. Run the terraform apply
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        command: apply
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'UdacityDS - 09 (5575e80b-f0da-4822-a386-38229fd50c58)'
        commandOptions: project3cicd


- stage: Build1
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
      name: 'myAgentPool'
    steps:
    - task: Bash@3
      displayName: Copy selenium file for publishing
      inputs:
        targetType: 'inline'
        script: cp $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py $(Build.ArtifactStagingDirectory)
    - publish: $(Build.ArtifactStagingDirectory)
      displayName: 'Upload Selenium File'
      artifact: selenium

- stage: Deployment     
  jobs:
  - deployment: UITests
    displayName: 'UI Tests'
    pool:
      vmImage: 'ubuntu-18.04'
      name: myAgentPool
    environment:  'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download selenium
            artifact: selenium
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install libgconf-2-4 libatk1.0-0 libatk-bridge2.0-0 libgdk-pixbuf2.0-0 libgtk-3-0 libgbm-dev libnss3-dev libxss-dev
                sudo apt-get install -y chromium-browser
                # python3 -m pip install --upgrade pip
          - task: Bash@3
            displayName: Install and setup Chromedriver
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                # Remove previous chromedriver zip file
                rm chromedriver_linux64.zip
                
                # Get the version of Chromedriver selenium tests are written for
                wget https://chromedriver.storage.googleapis.com/95.0.4638.69/chromedriver_linux64.zip
                # wget https://chromedriver.storage.googleapis.com/96.0.4664.45/chromedriver_linux64.zip
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                pip3 install selenium
                echo $PWD
                echo $PATH
                chromedriver -v
                # pip install --upgrade pip
          - task: Bash@3
            displayName: Run Selenium Tests
            inputs:
              targetType: 'inline'
              script: |
                python3 /home/skadmin/azagent/_work/1/selenium/login.py > /home/skadmin/azagent/_work/1/selenium/seleniumtestrun.log
                cat /home/skadmin/azagent/_work/1/selenium/seleniumtestrun.log
                sudo mv /home/skadmin/azagent/_work/1/selenium/seleniumtestrun.log /var/log

- stage: Run_Tests
  displayName: Run App Tests
  jobs:
  - job: RunPostmanTests
    pool:
      name: myAgentPool
      vmImage: $(vmImageName)
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: |
          sudo apt update
          sudo apt install -y nodejs npm
          sudo npm install -g newman
          sudo npm install -g newman-reporter-junitfull
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Regression Test Suite
      continueOnError: true
      inputs:
        script: 'newman run automatedtesting/postman/Regression.postman_collection.json -e automatedtesting/postman/project3.postman_environment.json --reporters cli,junit --reporter-junit-export TestResults/result-regression-test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Data Validation Test Suite
      inputs:
        script: 'newman run automatedtesting/postman/DV.postman_collection.json -e automatedtesting/postman/project3.postman_environment.json --reporters cli,junit --reporter-junit-export TestResults/result-data-validation-test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PublishTestResults@2
      displayName: Publish Postman Test Results
      inputs:
        testResultsFiles: '**/*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/TestResults'



- stage: Build
  jobs:
  - job: Build
    pool:
      name: myAgentPool
      vmImage: $(vmImageName)
    steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
      name: myAgentPool
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'UdacityDS - 09 (5575e80b-f0da-4822-a386-38229fd50c58)'
              appName: 'myapplication198570-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  TEST
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:/usr/lib/chromium-browser/


